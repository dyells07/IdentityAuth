{"version":3,"sources":["ng://ngx-bootstrap/progressbar/progressbar.config.ts","ng://ngx-bootstrap/progressbar/progressbar.component.ts","ng://ngx-bootstrap/progressbar/bar.component.ts","ng://ngx-bootstrap/progressbar/progressbar.module.ts"],"names":["ProgressbarConfig","Injectable","ProgressbarComponent","config","Object","assign","this","prototype","value","_animate","bars","forEach","b","animate","_striped","striped","isStacked","Array","isArray","_value","defineProperty","isBs3","_max","v","bar","recalculatePercentage","addBar","push","removeBar","splice","indexOf","Component","args","selector","template","Input","HostBinding","type","BarComponent","progress","percent","ngOnInit","ngOnDestroy","max","toFixed","totalPercentage","reduce","total","host","role","aria-valuemin","[class]","[class.progress-bar-animated]","[class.progress-bar-striped]","[class.active]","[attr.aria-valuenow]","[attr.aria-valuetext]","[attr.aria-valuemax]","[style.height.%]","decorators","Host","ProgressbarModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ProgressbarConfig {\n  /** if `true` changing value of progress bar will be animated */\n  animate: Boolean = false;\n  /** maximum total value of progress element */\n  max = 100;\n}\n","import { Component, HostBinding, Input } from '@angular/core';\nimport { ProgressbarConfig } from './progressbar.config';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { BarComponent } from './bar.component';\n\n@Component({\n  selector: 'progressbar',\n  templateUrl: './progressbar.component.html',\n  styles: [\n    `\n    :host {\n      width: 100%;\n      display: flex;\n    }\n  `\n  ]\n})\nexport class ProgressbarComponent {\n  /** if `true` changing value of progress bar will be animated */\n  @Input()\n  set animate(value: boolean) {\n    this._animate = value;\n    this.bars.forEach((b: BarComponent) => {\n      b.animate = value;\n    });\n  }\n  /** If `true`, striped classes are applied */\n  @Input()\n  set striped(value: boolean) {\n    this._striped = value;\n    this.bars.forEach((b: BarComponent) => {\n      b.striped = value;\n    });\n  }\n\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n  @Input() type: string;\n  /** current value of progress bar. Could be a number or array of objects\n   * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\n   */\n  @Input()\n  /* tslint:disable-next-line:no-any */\n  set value(value: number | any[]) {\n    this.isStacked = Array.isArray(value);\n    this._value = value;\n  }\n  isStacked = false;\n  _striped: boolean;\n  _animate: boolean;\n  /* tslint:disable-next-line:no-any */\n  _value: number | any[];\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  /** maximum total value of progress element */\n  @HostBinding('attr.max')\n  @Input()\n  get max(): number {\n    return this._max;\n  }\n\n  set max(v: number) {\n    this._max = v;\n    this.bars.forEach((bar: BarComponent) => {\n      bar.recalculatePercentage();\n    });\n  }\n\n  @HostBinding('class.progress') addClass = true;\n\n  /* tslint:disable-next-line:no-any */\n  bars: BarComponent[] = [];\n\n  protected _max = 100;\n\n  constructor(config: ProgressbarConfig) {\n    Object.assign(this, config);\n  }\n  addBar(bar: BarComponent): void {\n    bar.animate = this._animate;\n    bar.striped = this._striped;\n\n    this.bars.push(bar);\n  }\n\n  removeBar(bar: BarComponent): void {\n    this.bars.splice(this.bars.indexOf(bar), 1);\n  }\n}\n","import {\n  Component,\n  Host,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit\n} from '@angular/core';\n\nimport { ProgressbarComponent } from './progressbar.component';\nimport { isBs3 } from 'ngx-bootstrap/utils';\n\n// todo: number pipe\n// todo: use query from progress?\n@Component({\n  selector: 'bar',\n  templateUrl: './bar.component.html',\n  host: {\n    role: 'progressbar',\n    'aria-valuemin': '0',\n    '[class]': '\"progress-bar \" + (type ? \"progress-bar-\" + type + \" bg-\" + type : \"\")',\n    '[class.progress-bar-animated]': '!isBs3 && animate',\n    '[class.progress-bar-striped]': 'striped',\n    '[class.active]': 'isBs3 && animate',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-valuetext]': 'percent ? percent.toFixed(0) + \"%\" : \"\"',\n    '[attr.aria-valuemax]': 'max',\n    '[style.height.%]': '\"100\"'\n  }\n})\nexport class BarComponent implements OnInit, OnDestroy {\n  max: number;\n\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n  @Input() type: string;\n\n  /** current value of progress bar */\n  @Input()\n  get value(): number {\n    return this._value;\n  }\n\n  set value(v: number) {\n    if (!v && v !== 0) {\n      return;\n    }\n    this._value = v;\n    this.recalculatePercentage();\n  }\n\n  @HostBinding('style.width.%')\n  get setBarWidth() {\n    this.recalculatePercentage();\n\n    return this.percent;\n  }\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  striped: boolean;\n  animate: boolean;\n  percent = 0;\n  progress: ProgressbarComponent;\n\n  protected _value: number;\n\n  constructor(@Host() progress: ProgressbarComponent) {\n    this.progress = progress;\n  }\n\n  ngOnInit(): void {\n    this.progress.addBar(this);\n  }\n\n  ngOnDestroy(): void {\n    this.progress.removeBar(this);\n  }\n\n  recalculatePercentage(): void {\n    this.percent = +(this.value / this.progress.max * 100).toFixed(2);\n\n    const totalPercentage = this.progress.bars\n      .reduce(function (total: number, bar: BarComponent): number {\n        return total + bar.percent;\n      }, 0);\n\n    if (totalPercentage > 100) {\n      this.percent -= totalPercentage - 100;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { BarComponent } from './bar.component';\nimport { ProgressbarComponent } from './progressbar.component';\nimport { ProgressbarConfig } from './progressbar.config';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [BarComponent, ProgressbarComponent],\n  exports: [BarComponent, ProgressbarComponent]\n})\nexport class ProgressbarModule {\n  static forRoot(): ModuleWithProviders {\n    return { ngModule: ProgressbarModule, providers: [ProgressbarConfig] };\n  }\n}\n"]}