{"version":3,"sources":["ng://ngx-bootstrap/carousel/carousel.config.ts","ng://ngx-bootstrap/carousel/carousel.component.ts","ng://ngx-bootstrap/carousel/slide.component.ts","ng://ngx-bootstrap/carousel/carousel.module.ts"],"names":["CarouselConfig","Injectable","CarouselComponent","config","ngZone","this","EventEmitter","LinkedList","Object","assign","prototype","_currentActiveSlide","index","_slides","length","_select","_interval","value","restartTimer","defineProperty","toArray","isBs3","ngOnDestroy","destroyed","addSlide","slide","add","activeSlide","play","removeSlide","_this","remIndex","indexOf","nextSlideIndex_1","isLast","noWrap","remove","setTimeout","currentSlideIndex_1","getCurrentSlideIndex","activeSlideChange","emit","nextSlide","force","findNextSlideIndex","Direction","NEXT","previousSlide","PREV","selectSlide","isPlaying","pause","noPause","resetTimer","findIndex","active","direction","nextSlideIndex","Error","isNaN","currentSlide","get","interval","currentInterval","runOutsideAngular","setInterval","nInterval","run","slides","clearInterval","Component","args","selector","template","NgZone","Input","Output","SlideComponent","carousel","ngOnInit","host","[attr.aria-hidden]","HostBinding","type","CarouselModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CarouselConfig {\n  /** Default interval of auto changing of slides */\n  interval = 5000;\n\n  /** Is loop of auto changing of slides can be paused */\n  noPause = false;\n\n  /** Is slides can wrap from the last to the first slide */\n  noWrap = false;\n\n  /** Show carousel-indicators */\n  showIndicators = true;\n}\n","// tslint:disable:max-file-line-count\n/***\n * pause (not yet supported) (?string='hover') - event group name which pauses\n * the cycling of the carousel, if hover pauses on mouseenter and resumes on\n * mouseleave keyboard (not yet supported) (?boolean=true) - if false\n * carousel will not react to keyboard events\n * note: swiping not yet supported\n */\n/****\n * Problems:\n * 1) if we set an active slide via model changes, .active class remains on a\n * current slide.\n * 2) if we have only one slide, we shouldn't show prev/next nav buttons\n * 3) if first or last slide is active and noWrap is true, there should be\n * \"disabled\" class on the nav buttons.\n * 4) default interval should be equal 5000\n */\n\nimport {\n  Component, EventEmitter, Input, NgZone, OnDestroy, Output\n} from '@angular/core';\n\nimport { isBs3, LinkedList } from 'ngx-bootstrap/utils';\nimport { SlideComponent } from './slide.component';\nimport { CarouselConfig } from './carousel.config';\n\nexport enum Direction {\n  UNKNOWN,\n  NEXT,\n  PREV\n}\n\n/**\n * Base element to create carousel\n */\n@Component({\n  selector: 'carousel',\n  templateUrl: './carousel.component.html'\n})\nexport class CarouselComponent implements OnDestroy {\n  /** If `true` â carousel will not cycle continuously and will have hard stops (prevent looping) */\n  @Input() noWrap: boolean;\n  /**  If `true` â will disable pausing on carousel mouse hover */\n  @Input() noPause: boolean;\n  /**  If `true` â carousel-indicators are visible  */\n  @Input() showIndicators: boolean;\n\n  /** Will be emitted when active slide has been changed. Part of two-way-bindable [(activeSlide)] property */\n  @Output()\n  activeSlideChange: EventEmitter<number> = new EventEmitter<number>(false);\n\n  /** Index of currently displayed slide(started for 0) */\n  @Input()\n  set activeSlide(index: number) {\n    if (this._slides.length && index !== this._currentActiveSlide) {\n      this._select(index);\n    }\n  }\n\n  get activeSlide(): number {\n    return this._currentActiveSlide;\n  }\n\n  /**\n   * Delay of item cycling in milliseconds. If false, carousel won't cycle\n   * automatically.\n   */\n  @Input()\n  get interval(): number {\n    return this._interval;\n  }\n\n  set interval(value: number) {\n    this._interval = value;\n    this.restartTimer();\n  }\n\n  get slides(): SlideComponent[] {\n    return this._slides.toArray();\n  }\n\n  // tslint:disable-next-line:no-any\n  protected currentInterval: any;\n  protected _currentActiveSlide: number;\n  protected _interval: number;\n  protected _slides: LinkedList<SlideComponent> = new LinkedList<SlideComponent>();\n  protected isPlaying: boolean;\n  protected destroyed = false;\n\n  get isBs4(): boolean {\n    return !isBs3();\n  }\n\n  constructor(config: CarouselConfig, private ngZone: NgZone) {\n    Object.assign(this, config);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed = true;\n  }\n\n  /**\n   * Adds new slide. If this slide is first in collection - set it as active\n   * and starts auto changing\n   * @param slide\n   */\n  addSlide(slide: SlideComponent): void {\n    this._slides.add(slide);\n    if (this._slides.length === 1) {\n      this._currentActiveSlide = void 0;\n      this.activeSlide = 0;\n      this.play();\n    }\n  }\n\n  /**\n   * Removes specified slide. If this slide is active - will roll to another\n   * slide\n   * @param slide\n   */\n  removeSlide(slide: SlideComponent): void {\n    const remIndex = this._slides.indexOf(slide);\n\n    if (this._currentActiveSlide === remIndex) {\n      // removing of active slide\n      let nextSlideIndex: number = void 0;\n      if (this._slides.length > 1) {\n        // if this slide last - will roll to first slide, if noWrap flag is\n        // FALSE or to previous, if noWrap is TRUE in case, if this slide in\n        // middle of collection, index of next slide is same to removed\n        nextSlideIndex = !this.isLast(remIndex)\n          ? remIndex\n          : this.noWrap ? remIndex - 1 : 0;\n      }\n      this._slides.remove(remIndex);\n\n      // prevents exception with changing some value after checking\n      setTimeout(() => {\n        this._select(nextSlideIndex);\n      }, 0);\n    } else {\n      this._slides.remove(remIndex);\n      const currentSlideIndex = this.getCurrentSlideIndex();\n      setTimeout(() => {\n        // after removing, need to actualize index of current active slide\n        this._currentActiveSlide = currentSlideIndex;\n        this.activeSlideChange.emit(this._currentActiveSlide);\n      }, 0);\n    }\n  }\n\n  /**\n   * Rolling to next slide\n   * @param force: {boolean} if true - will ignore noWrap flag\n   */\n  nextSlide(force = false): void {\n    this.activeSlide = this.findNextSlideIndex(Direction.NEXT, force);\n  }\n\n  /**\n   * Rolling to previous slide\n   * @param force: {boolean} if true - will ignore noWrap flag\n   */\n  previousSlide(force = false): void {\n    this.activeSlide = this.findNextSlideIndex(Direction.PREV, force);\n  }\n\n  /**\n   * Rolling to specified slide\n   * @param index: {number} index of slide, which must be shown\n   */\n  selectSlide(index: number): void {\n    this.activeSlide = index;\n  }\n\n  /**\n   * Starts a auto changing of slides\n   */\n  play(): void {\n    if (!this.isPlaying) {\n      this.isPlaying = true;\n      this.restartTimer();\n    }\n  }\n\n  /**\n   * Stops a auto changing of slides\n   */\n  pause(): void {\n    if (!this.noPause) {\n      this.isPlaying = false;\n      this.resetTimer();\n    }\n  }\n\n  /**\n   * Finds and returns index of currently displayed slide\n   */\n  getCurrentSlideIndex(): number {\n    return this._slides.findIndex((slide: SlideComponent) => slide.active);\n  }\n\n  /**\n   * Defines, whether the specified index is last in collection\n   * @param index\n   */\n  isLast(index: number): boolean {\n    return index + 1 >= this._slides.length;\n  }\n\n  /**\n   * Defines next slide index, depending of direction\n   * @param direction: Direction(UNKNOWN|PREV|NEXT)\n   * @param force: {boolean} if TRUE - will ignore noWrap flag, else will\n   *   return undefined if next slide require wrapping\n   */\n  private findNextSlideIndex(direction: Direction, force: boolean): number {\n    let nextSlideIndex = 0;\n\n    if (\n      !force &&\n      (this.isLast(this.activeSlide) &&\n        direction !== Direction.PREV &&\n        this.noWrap)\n    ) {\n      return void 0;\n    }\n\n    switch (direction) {\n      case Direction.NEXT:\n        // if this is last slide, not force, looping is disabled\n        // and need to going forward - select current slide, as a next\n        nextSlideIndex = !this.isLast(this._currentActiveSlide)\n          ? this._currentActiveSlide + 1\n          : !force && this.noWrap ? this._currentActiveSlide : 0;\n        break;\n      case Direction.PREV:\n        // if this is first slide, not force, looping is disabled\n        // and need to going backward - select current slide, as a next\n        nextSlideIndex =\n          this._currentActiveSlide > 0\n            ? this._currentActiveSlide - 1\n            : !force && this.noWrap\n            ? this._currentActiveSlide\n            : this._slides.length - 1;\n        break;\n      default:\n        throw new Error('Unknown direction');\n    }\n\n    return nextSlideIndex;\n  }\n\n  /**\n   * Sets a slide, which specified through index, as active\n   * @param index\n   */\n  private _select(index: number): void {\n    if (isNaN(index)) {\n      this.pause();\n\n      return;\n    }\n    const currentSlide = this._slides.get(this._currentActiveSlide);\n    if (currentSlide) {\n      currentSlide.active = false;\n    }\n    const nextSlide = this._slides.get(index);\n    if (nextSlide) {\n      this._currentActiveSlide = index;\n      nextSlide.active = true;\n      this.activeSlide = index;\n      this.activeSlideChange.emit(index);\n    }\n  }\n\n  /**\n   * Starts loop of auto changing of slides\n   */\n  private restartTimer() {\n    this.resetTimer();\n    const interval = +this.interval;\n    if (!isNaN(interval) && interval > 0) {\n      this.currentInterval = this.ngZone.runOutsideAngular(() => {\n        return setInterval(() => {\n          const nInterval = +this.interval;\n          this.ngZone.run(() => {\n            if (\n              this.isPlaying &&\n              !isNaN(this.interval) &&\n              nInterval > 0 &&\n              this.slides.length\n            ) {\n              this.nextSlide();\n            } else {\n              this.pause();\n            }\n          });\n        }, interval);\n      });\n    }\n  }\n\n  /**\n   * Stops loop of auto changing of slides\n   */\n  private resetTimer(): void {\n    if (this.currentInterval) {\n      clearInterval(this.currentInterval);\n      this.currentInterval = void 0;\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnDestroy,\n  Input,\n  OnInit\n} from '@angular/core';\n\nimport { CarouselComponent } from './carousel.component';\n\n@Component({\n  selector: 'slide',\n  template: `\n    <div [class.active]=\"active\" class=\"item\">\n      <ng-content></ng-content>\n    </div>\n  `,\n  host: {\n    '[attr.aria-hidden]': '!active'\n  }\n})\nexport class SlideComponent implements OnInit, OnDestroy {\n  /** Is current slide active */\n  @HostBinding('class.active')\n  @Input()\n  active: boolean;\n\n  /** Wraps element by appropriate CSS classes */\n  @HostBinding('class.item')\n  @HostBinding('class.carousel-item')\n  addClass = true;\n\n  /** Link to Parent(container-collection) component */\n  protected carousel: CarouselComponent;\n\n  constructor(carousel: CarouselComponent) {\n    this.carousel = carousel;\n  }\n\n  /** Fires changes in container collection after adding a new slide instance */\n  ngOnInit(): void {\n    this.carousel.addSlide(this);\n  }\n\n  /** Fires changes in container collection after removing of this slide instance */\n  ngOnDestroy(): void {\n    this.carousel.removeSlide(this);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CarouselComponent } from './carousel.component';\nimport { SlideComponent } from './slide.component';\nimport { CarouselConfig } from './carousel.config';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [SlideComponent, CarouselComponent],\n  exports: [SlideComponent, CarouselComponent],\n  providers: [CarouselConfig]\n})\nexport class CarouselModule {\n  static forRoot(): ModuleWithProviders {\n    return { ngModule: CarouselModule, providers: [] };\n  }\n}\n"]}