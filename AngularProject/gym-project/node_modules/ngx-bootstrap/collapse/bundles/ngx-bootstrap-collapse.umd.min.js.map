{"version":3,"sources":["ng://ngx-bootstrap/collapse/collapse.directive.ts","ng://ngx-bootstrap/collapse/collapse.module.ts"],"names":["CollapseDirective","_el","_renderer","this","EventEmitter","prototype","isExpanded","value","toggle","hide","show","isCollapse","isCollapsing","isCollapsed","display","collapsed","emit","setStyle","nativeElement","expanded","Directive","args","selector","exportAs","host","[class.collapse]","ElementRef","Renderer2","Output","HostBinding","type","Input","CollapseModule","forRoot","ngModule","providers","NgModule","declarations","exports"],"mappings":"sUACA,IAAAA,EAAA,WAiDE,SAAAA,EAAoBC,EAAyBC,GAAzBC,KAAAF,IAAAA,EAAyBE,KAAAD,UAAAA,iBA7BJ,IAAIE,EAAAA,2BAGL,IAAIA,EAAAA,8BAO/B,oBAEkC,mBAEH,qBAEI,+BAI5CJ,EAAAK,UAAA,WAAQ,KAKZ,WACE,OAAOF,KAAKG,yBANDC,GACXJ,KAAKG,WAAaC,EAClBJ,KAAKK,0CAUPR,EAAAK,UAAAG,OAAA,WACML,KAAKG,WACPH,KAAKM,OAELN,KAAKO,QAKTV,EAAAK,UAAAI,KAAA,WACEN,KAAKQ,YAAa,EAClBR,KAAKS,cAAe,EAEpBT,KAAKG,YAAa,EAClBH,KAAKU,aAAc,EAEnBV,KAAKQ,YAAa,EAClBR,KAAKS,cAAe,EAEpBT,KAAKW,QAAU,OACfX,KAAKY,UAAUC,KAAKb,OAItBH,EAAAK,UAAAK,KAAA,WACEP,KAAKQ,YAAa,EAClBR,KAAKS,cAAe,EAEpBT,KAAKG,YAAa,EAClBH,KAAKU,aAAc,EAEnBV,KAAKW,QAAU,QAEfX,KAAKQ,YAAa,EAClBR,KAAKS,cAAe,EACpBT,KAAKD,UAAUe,SACbd,KAAKF,IAAIiB,cACT,WACA,WAEFf,KAAKD,UAAUe,SAASd,KAAKF,IAAIiB,cAAe,SAAU,QAC1Df,KAAKgB,SAASH,KAAKb,2BAnFtBiB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,aACVC,SAAU,cACVC,KAAM,CACJC,mBAAoB,qDAZtBC,EAAAA,kBAKAC,EAAAA,gDAaCC,EAAAA,yBAGAA,EAAAA,wBAEAC,EAAAA,YAAWR,KAAA,CAAC,qCAEZQ,EAAAA,YAAWR,KAAA,CAAC,aAAU,CAAAS,KACtBD,EAAAA,YAAWR,KAAA,CAAC,eAAY,CAAAS,KACxBD,EAAAA,YAAWR,KAAA,CAAC,2CAGZQ,EAAAA,YAAWR,KAAA,CAAC,wCAEZQ,EAAAA,YAAWR,KAAA,CAAC,wCAEZQ,EAAAA,YAAWR,KAAA,CAAC,sCAGZU,EAAAA,WAvCH,GCDAC,EAAA,gCASSA,EAAAC,QAAP,WACE,MAAO,CAAEC,SAAUF,EAAgBG,UAAW,yBANjDC,EAAAA,SAAQf,KAAA,CAAC,CACRgB,aAAc,CAACrC,GACfsC,QAAS,CAACtC,SANZ","sourcesContent":["// todo: add animations when https://github.com/angular/angular/issues/9947 solved\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  Output,\n  Renderer2\n} from '@angular/core';\n\n@Directive({\n  selector: '[collapse]',\n  exportAs: 'bs-collapse',\n  host: {\n    '[class.collapse]': 'true'\n  }\n})\nexport class CollapseDirective {\n  /** This event fires as soon as content collapses */\n  /* tslint:disable-next-line: no-any */\n  @Output() collapsed: EventEmitter<any> = new EventEmitter();\n  /** This event fires as soon as content becomes visible */\n  /* tslint:disable-next-line: no-any */\n  @Output() expanded: EventEmitter<any> = new EventEmitter();\n\n  @HostBinding('style.display') display: string;\n  // shown\n  @HostBinding('class.in')\n  @HostBinding('class.show')\n  @HostBinding('attr.aria-expanded')\n  isExpanded = true;\n  // hidden\n  @HostBinding('attr.aria-hidden') isCollapsed = false;\n  // stale state\n  @HostBinding('class.collapse') isCollapse = true;\n  // animation state\n  @HostBinding('class.collapsing') isCollapsing = false;\n\n  /** A flag indicating visibility of content (shown or hidden) */\n  @Input()\n  set collapse(value: boolean) {\n    this.isExpanded = value;\n    this.toggle();\n  }\n\n  get collapse(): boolean {\n    return this.isExpanded;\n  }\n\n  constructor(private _el: ElementRef, private _renderer: Renderer2) {}\n\n  /** allows to manually toggle content visibility */\n  toggle(): void {\n    if (this.isExpanded) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  /** allows to manually hide content */\n  hide(): void {\n    this.isCollapse = false;\n    this.isCollapsing = true;\n\n    this.isExpanded = false;\n    this.isCollapsed = true;\n\n    this.isCollapse = true;\n    this.isCollapsing = false;\n\n    this.display = 'none';\n    this.collapsed.emit(this);\n  }\n\n  /** allows to manually show collapsed content */\n  show(): void {\n    this.isCollapse = false;\n    this.isCollapsing = true;\n\n    this.isExpanded = true;\n    this.isCollapsed = false;\n\n    this.display = 'block';\n    // this.height = 'auto';\n    this.isCollapse = true;\n    this.isCollapsing = false;\n    this._renderer.setStyle(\n      this._el.nativeElement,\n      'overflow',\n      'visible'\n    );\n    this._renderer.setStyle(this._el.nativeElement, 'height', 'auto');\n    this.expanded.emit(this);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CollapseDirective } from './collapse.directive';\n\n@NgModule({\n  declarations: [CollapseDirective],\n  exports: [CollapseDirective]\n})\nexport class CollapseModule {\n  static forRoot(): ModuleWithProviders {\n    return { ngModule: CollapseModule, providers: [] };\n  }\n}\n"]}